local RunService = game:GetService("RunService")
local InputService = game:GetService("UserInputService")
local LocalPlayer = game.Players.LocalPlayer
local Indicator = Drawing.new("Text")
local SetProperty = sethiddenproperty

Indicator.Visible = true
Indicator.Position = Vector2.new(50, 100)
Indicator.Text = "Enabled: false"
Indicator.Color = Color3.new(1, 1, 1)
Indicator.Outline = true

-- Hidden Desync function
function Desync()
    task.spawn(function()
        while _G.Config and _G.Config['Enabled'] do
            if LocalPlayer.Character then 
                local HumanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if HumanoidRootPart then
                    local loop = RunService.Heartbeat:Connect(function()
                        SetProperty(HumanoidRootPart, "NetworkIsSleeping", true)
                        task.wait(_G.Config['Delay'] / 1000)
                        SetProperty(HumanoidRootPart, "NetworkIsSleeping", false)
                        task.wait((_G.Config['Delay'] / 1000) * 1.5)
                        SetProperty(HumanoidRootPart, "NetworkIsSleeping", true)
                        task.wait((_G.Config['Delay'] / 1000) * 2)
                        
                        if _G.Config['Enabled'] == false then
                            loop:Disconnect()
                        end
                    end)
                    task.wait()
                    if loop then
                        loop:Disconnect()
                    end
                end
            end
            task.wait()
        end
    end)
end

-- Listen for InputBegan event
InputService.InputBegan:Connect(function(Key, ProcessedEvent)
    if ProcessedEvent then return end
    -- Check if the key pressed matches the configured keybind
    if Key.KeyCode == _G.Config['Keybind'] then
        _G.Config['Enabled'] = not _G.Config['Enabled']
        if _G.Config['Enabled'] then
            Desync() -- Start the Desync function
        end
        Indicator.Text = "Enabled: " .. tostring(_G.Config['Enabled'])
    end
end)
